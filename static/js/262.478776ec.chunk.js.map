{"version":3,"file":"static/js/262.478776ec.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/virtual-core/src/utils.ts","../node_modules/@tanstack/virtual-core/src/index.ts","../node_modules/@tanstack/react-virtual/src/index.tsx"],"sourcesContent":["export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => any\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  return (): TResult => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result!\n  }\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) < 1\n","import { approxEqual, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (typeof ResizeObserver === 'undefined') {\n    return () => {}\n  }\n\n  const observer = new ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollX' : 'scrollY'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number | (() => number)\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  gap?: number\n  scrollingDelay?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private isScrollingTimeoutId: ReturnType<typeof setTimeout> | null = null\n  private scrollToIndexTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  shouldAdjustScrollPositionOnItemSizeChange:\n    | undefined\n    | ((\n        item: VirtualItem,\n        delta: number,\n        instance: Virtualizer<TScrollElement, TItemElement>,\n      ) => boolean)\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, entry)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset =\n      typeof this.options.initialOffset === 'function'\n        ? this.options.initialOffset()\n        : this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.maybeNotify()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      ...opts,\n    }\n  }\n\n  private notify = (sync: boolean) => {\n    this.options.onChange?.(this, sync)\n  }\n\n  private maybeNotify = memo(\n    () => {\n      this.calculateRange()\n\n      return [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ]\n    },\n    (isScrolling) => {\n      this.notify(isScrolling)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ] as [boolean, number | null, number | null],\n    },\n  )\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.maybeNotify()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollAdjustments = 0\n\n          if (this.scrollOffset === offset) {\n            return\n          }\n\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId)\n            this.isScrollingTimeoutId = null\n          }\n\n          this.isScrolling = true\n          this.scrollDirection =\n            this.scrollOffset < offset ? 'forward' : 'backward'\n          this.scrollOffset = offset\n\n          this.maybeNotify()\n\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null\n            this.isScrolling = false\n            this.scrollDirection = null\n\n            this.maybeNotify()\n          }, this.options.scrollingDelay)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private memoOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.memoOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return range === null\n        ? []\n        : rangeExtractor({\n            ...range,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const item = this.measurementsCache[this.indexFromElement(node)]\n\n    if (!item || !node.isConnected) {\n      this.measureElementCache.forEach((cached, key) => {\n        if (cached === node) {\n          this.observer.unobserve(node)\n          this.measureElementCache.delete(key)\n        }\n      })\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    this.resizeItem(item, measuredItemSize)\n  }\n\n  resizeItem = (item: VirtualItem, size: number) => {\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (\n        this.shouldAdjustScrollPositionOnItemSizeChange !== undefined\n          ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this)\n          : item.start < this.scrollOffset + this.scrollAdjustments\n      ) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null) {\n      clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode()) {\n      this.scrollToIndexTimeoutId = setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else {\n      // If lanes is 1, use the last measurement's end, otherwise find the maximum end value among all measurements\n      end =\n        this.options.lanes === 1\n          ? measurements[measurements.length - 1]?.end ?? 0\n          : Math.max(\n              ...measurements.slice(-this.options.lanes).map((m) => m.end),\n            )\n    }\n\n    return end - this.options.scrollMargin + this.options.paddingEnd\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify(false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n","import * as React from 'react'\nimport { flushSync } from 'react-dom'\nimport {\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  PartialKeys,\n  Virtualizer,\n  VirtualizerOptions,\n  windowScroll,\n} from '@tanstack/virtual-core'\nexport * from '@tanstack/virtual-core'\n\n//\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance, sync) => {\n      if (sync) {\n        flushSync(rerender)\n      } else {\n        rerender()\n      }\n      options.onChange?.(instance, sync)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  React.useEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    initialOffset: () => (typeof document !== 'undefined' ? window.scrollY : 0),\n    ...options,\n  })\n}\n"],"names":["memo","getDeps","fn","opts","_opts$initialDeps","result","deps","initialDeps","_a","_b","_c","_d","depTime","key","debug","call","Date","now","newDeps","length","some","dep","index","resultTime","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","concat","max","min","onChange","notUndefined","value","msg","Error","defaultKeyExtractor","defaultRangeExtractor","range","start","startIndex","overscan","end","endIndex","count","arr","i","push","observeElementRect","instance","cb","element","scrollElement","handler","rect","width","height","getBoundingClientRect","ResizeObserver","observer","entries","entry","borderBoxSize","box","inlineSize","blockSize","observe","unobserve","observeElementOffset","options","horizontal","addEventListener","passive","removeEventListener","measureElement","elementScroll","offset","_ref2","adjustments","behavior","toOffset","scrollTo","Virtualizer","constructor","_this","unsubs","isScrolling","isScrollingTimeoutId","scrollToIndexTimeoutId","measurementsCache","itemSizeCache","Map","pendingMeasuredCacheIndexes","scrollDirection","scrollAdjustments","measureElementCache","_ro","get","forEach","_measureElement","target","disconnect","setOptions","opts2","Object","_ref3","this","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","initialRect","scrollMargin","gap","scrollingDelay","indexAttribute","initialMeasurementsCache","lanes","notify","sync","maybeNotify","calculateRange","process","cleanup","filter","Boolean","d","_didMount","_willUpdate","getScrollElement","_scrollToOffset","scrollOffset","scrollRect","clearTimeout","setTimeout","getSize","memoOptions","getFurthestMeasurement","measurements","furthestMeasurementsFound","furthestMeasurements","m","measurement","has","lane","previousFurthestMeasurement","set","size","Array","from","values","sort","a","b","getMeasurements","_ref4","slice","furthestMeasurement","measuredSize","estimateSize","outerSize","_ref7","getOffset","findNearestBinarySearch","getIndexes","indexFromElement","node","attributeName","indexStr","getAttribute","parseInt","warn","item","isConnected","cached","delete","prevNode","measuredItemSize","resizeItem","_this$itemSizeCache$g","delta","shouldAdjustScrollPositionOnItemSizeChange","getVirtualItems","indexes","virtualItems","k","len","getVirtualItemForOffset","getOffsetForAlignment","align","scrollSizeProp","maxOffset","document","documentElement","getOffsetForIndex","arguments","undefined","isDynamicMode","cancelScrollToIndex","scrollToOffset","scrollToIndex","initialAlign","toOffset2","abs","approxEqual","scrollBy","getTotalSize","_ref5","map","_ref6","scrollToFn","measure","low","high","getCurrentValue","middle","currentValue","useIsomorphicLayoutEffect","React","useVirtualizerBase","rerender","resolvedOptions","instance2","flushSync","useVirtualizer"],"sourceRoot":""}